import logging
import os
import csv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException


class DivanParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ divan.ru.
    –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ CSV.
    """

    BASE_URL = "https://www.divan.ru/category/"

    def __init__(self, headless: bool = True):
        """
        :param headless: –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        self._setup_logging()
        self.driver = self._init_driver(headless)
        self.products = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s",
        )
        self.logger = logging.getLogger("DivanParser")

    def _init_driver(self, headless: bool):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver."""
        options = webdriver.ChromeOptions()
        if headless:
            options.add_argument("--headless=new")
        options.add_argument("--disable-blink-features=AutomationControlled")
        return webdriver.Chrome(options=options)

    def parse_category(self, category: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        url = self.BASE_URL + category
        self.logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} ({url})")

        self.driver.get(url)

        try:
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_all_elements_located(
                    (By.CSS_SELECTOR, "div[data-testid='product-card']")
                )
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {url}: {e}")
            return

        products = self.driver.find_elements(
            By.CSS_SELECTOR, "div[data-testid='product-card']"
        )

        for product in products:
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                try:
                    name = product.find_element(
                        By.CSS_SELECTOR, "span[itemprop='name']"
                    ).text
                except NoSuchElementException:
                    try:
                        name = product.find_element(
                            By.CSS_SELECTOR, "a[data-testid='product-title']"
                        ).text
                    except NoSuchElementException:
                        try:
                            name = product.find_element(By.CSS_SELECTOR, ".PJZwc").text
                        except NoSuchElementException:
                            name = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                # –¶–µ–Ω–∞
                try:
                    price = product.find_element(
                        By.CLASS_NAME, "ui-LD-ZU KIkOH"
                    ).text
                except NoSuchElementException:
                    try:
                        price = product.find_element(
                            By.CSS_SELECTOR, "meta[itemprop='price']"
                        ).get_attribute("content")
                    except NoSuchElementException:
                        try:
                            price = product.find_element(
                                By.CSS_SELECTOR, ".ui-LD-ZU.TA0JV"
                            ).text
                        except NoSuchElementException:
                            price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

                # –°—Å—ã–ª–∫–∞
                try:
                    link = product.find_element(By.TAG_NAME, "a").get_attribute("href")
                except NoSuchElementException:
                    link = "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                self.products.append({
                    "name": name,
                    "price": price,
                    "link": link,
                    "category": category
                })

                self.logger.info(f"–ù–∞—à—ë–ª —Ç–æ–≤–∞—Ä: {name} ‚Äî {price}")

            except Exception as e:
                self.logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–æ–≤–∞—Ä. –û—à–∏–±–∫–∞: {e}\n"
                    f"HTML:\n{product.get_attribute('outerHTML')}"
                )

        self.logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –∑–∞–≤–µ—Ä—à—ë–Ω")

    def export_results(self, output_path: str = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV.
        """
        if not self.products:
            self.logger.warning("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –ü–∞–ø–∫–∞ data —Ä—è–¥–æ–º —Å parsing.py
        base_dir = os.path.dirname(os.path.abspath(__file__))
        if output_path is None:
            output_path = os.path.join(base_dir, "..", "data", "raw_products.csv")

        output_path = os.path.normpath(output_path)
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)

        with open(output_path, mode="w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=["name", "price", "link", "category"])
            writer.writeheader()
            writer.writerows(self.products)

        self.logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV: {output_path}")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä."""
        self.driver.quit()
        self.logger.info("–ó–∞–∫—Ä—ã–ª –±—Ä–∞—É–∑–µ—Ä")


if __name__ == "__main__":
    # üëâ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = ["sofas", "kresla", "pufy"]

    parser = DivanParser(headless=True)
    try:
        for category in categories:
            parser.parse_category(category)
        # –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤–Ω—É—Ç—Ä–∏ export_results
        parser.export_results()
    finally:
        parser.close()

